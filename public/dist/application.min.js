"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload","angular.filter"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return"guest"===role||Authentication.user&&void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),function(app){app.registerModule("exams-analysis",["trNgGrid"]),app.registerModule("exams-analysis.services"),app.registerModule("exams-analysis.routes",["ui.router","exams-analysis.services"])}(ApplicationConfiguration),function(app){app.registerModule("exams",["angular.filter"]),app.registerModule("exams.services"),app.registerModule("exams.routes",["ui.router","exams.services"])}(ApplicationConfiguration),function(app){app.registerModule("standards",["angular.filter","exams.services","trNgGrid"]),app.registerModule("standards.services"),app.registerModule("standards.routes",["ui.router","exams.services","standards.services"])}(ApplicationConfiguration),function(app){app.registerModule("exams-take",["angular.filter"]),app.registerModule("exams-take.services"),app.registerModule("exams-take.routes",["ui.router","exams-take.services"])}(ApplicationConfiguration),function(app){app.registerModule("info",["angular.filter"]),app.registerModule("info.services"),app.registerModule("info.routes",["ui.router","info.services"])}(ApplicationConfiguration),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",position:5,roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),function(){function MenuConfig(Menus){Menus.addMenu("account",{roles:["user"]}),Menus.addMenuItem("account",{title:"",state:"settings",type:"dropdown",roles:["user"]}),Menus.addSubMenuItem("account","settings",{title:"Edit Profile",state:"settings.profile"}),Menus.addSubMenuItem("account","settings",{title:"Edit Profile Picture",state:"settings.picture"}),Menus.addSubMenuItem("account","settings",{title:"Change Password",state:"settings.password"}),Menus.addSubMenuItem("account","settings",{title:"Manage Social Accounts",state:"settings.accounts"})}angular.module("core").run(MenuConfig),MenuConfig.$inject=["Menus"]}(),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.accountMenu=Menus.getMenu("account").items[0],$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector","Authentication",function($q,$injector,Authentication){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:Authentication.user=null,$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),function(){function menuConfig(Menus){Menus.addSubMenuItem("topbar","admin",{title:"View Student Attempts",state:"exams-analysis.admin",roles:["admin"]})}angular.module("exams-analysis").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("exams-analysis",{url:"/review/attempt","abstract":!0,template:"<ui-view></ui-view>"}).state("exams-analysis.single",{parent:"exams-analysis",url:"/:aID",templateUrl:"modules/exams-analysis/client/views/review-single-attempt.client.view.html",controller:"ReviewAttemptController",resolve:{Attempt:["ExamsAnalysisService","$stateParams",function(ExamsAnalysisService,$stateParams){return ExamsAnalysisService.get_attempt($stateParams.aID)}]}}).state("exams-analysis.admin",{parent:"admin",templateUrl:"modules/exams-analysis/client/views/admin-review-attempts.client.view.html",url:"/review/attempts",controller:"AdminAttemptController",resolve:{AllAttempts:["ExamsAnalysisService",function(ExamsAnalysisService){return ExamsAnalysisService.get_all_attempts()}]}})}angular.module("exams-analysis.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){function AdminAttemptController($scope,$rootScope,$state,$stateParams,Authentication,$uibModal,ExamsAnalysisService,AllAttempts){$scope.all_attempts=AllAttempts.data,$scope.delete_attempt=function(_attempt){ExamsAnalysisService.delete_attempt(_attempt._id).then(function(response){$scope.all_attempts.splice($scope.all_attempts.indexOf(_attempt),1)},function(error){$scope.error=error,console.log(error)})},$scope.review_attempt=function(_attempt){$state.go("exams-analysis.single",{aID:_attempt._id})}}angular.module("exams-analysis").controller("AdminAttemptController",AdminAttemptController),AdminAttemptController.$inject=["$scope","$rootScope","$state","$stateParams","Authentication","$uibModal","ExamsAnalysisService","AllAttempts"]}(),function(){function ReviewAttemptController($scope,$rootScope,$state,$stateParams,Authentication,$uibModal,Attempt){$scope.attempt=Attempt.data,$scope.multiple_choice="multiple choice",$scope.multiple_select="multiple select",$scope.fill_in_the_blank="fill in the blank",$scope.set_answers=function(_attempt){for(var i=0;i<_attempt.questions.length;++i)for(var j=0;j<_attempt.student_answers.length;++j)if(_attempt.student_answers[j].question_id===_attempt.questions[i].data._id)for(var k=0;k<_attempt.questions[i].data.answers.length;++k)_attempt.questions[i].data.answers[k]._id===_attempt.student_answers[j].answer_id&&(_attempt.questions[i].data.type===$scope.multiple_choice?(_attempt.questions[i].selected_answer=_attempt.questions[i].data.answers[k]._id,_attempt.questions[i].data.answers[k].correct=_attempt.student_answers[j].correct):_attempt.questions[i].data.type===$scope.multiple_select?_attempt.questions[i].data.answers[k].correct=_attempt.student_answers[j].correct:_attempt.questions[i].data.type===$scope.fill_in_the_blank&&(_attempt.questions[i].data.answers[k].value=_attempt.student_answers[j].value,_attempt.questions[i].data.answers[k].content=_attempt.student_answers[j].content))},$scope.set_answers($scope.attempt),$scope.get_alert_type=function(_question){return _question.points_earned!=_question.data.points?"danger":"success"}}angular.module("exams-analysis").controller("ReviewAttemptController",ReviewAttemptController),ReviewAttemptController.$inject=["$scope","$rootScope","$state","$stateParams","Authentication","$uibModal","Attempt"]}(),function(){angular.module("exams-analysis.services").factory("ExamsAnalysisService",["$http",function($http){return{get_attempt:function(attempt_id){return $http.get("/api/attempts/"+attempt_id)},create_attempt:function(exam_id){return $http.post("/api/attempts",{exam_id:exam_id})},delete_attempt:function(attempt_id){return $http["delete"]("/api/attempts/"+attempt_id)},get_attempts:function(){return $http.get("/api/attempts")},get_all_attempts:function(){return $http.get("/api/admin/attempts")},save_answers:function(attempt){return $http.put("/api/attempts/"+attempt._id,attempt)},submit_attempt:function(attempt){return $http.post("/api/attempts/"+attempt._id)}}}])}(),function(){function menuConfig(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Edit Exams",state:"edit-exams",roles:["admin"]})}angular.module("exams").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("edit-exams",{parent:"admin",url:"/exams/edit",templateUrl:"modules/exams-crud/client/views/edit-exams.client.view.html",controller:"EditExamsController",resolve:{exams:["ExamsService",function(ExamsService){return ExamsService.get_exams()}]}}).state("edit-exams.single",{url:"/:exam_id",parent:"edit-exams",templateUrl:"modules/exams-crud/client/views/edit-single-exam.client.view.html",controller:"EditSingleExamController",resolve:{exam:["ExamsService","$stateParams",function(ExamsService,$stateParams){return $stateParams.exam_id?ExamsService.get_exam($stateParams.exam_id):null}]}})}angular.module("exams.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){function AddExamController($scope,$rootScope,$state,$stateParams,ExamsService,Authentication,$uibModalInstance,old_exam){$scope.exam={},$scope.alert=null,$scope.old_exam=old_exam,$scope.loading=!1,old_exam&&($scope.exam=JSON.parse(JSON.stringify(old_exam))),$scope.classes=["Algebra 1","Algebra 2"],$scope.submit=function(){return $scope.loading=!0,old_exam?void ExamsService.update_exam($scope.exam).then(function(response){old_exam.title=response.data.title,old_exam.allotted_time=response.data.allotted_time,old_exam.allowed_attempts=response.data.allowed_attempts,old_exam["class"]=response.data["class"],$uibModalInstance.close(response.data),$scope.loading=!1},function(error){$scope.loading=!1}):void ExamsService.create_exam($scope.exam).then(function(response){$uibModalInstance.close(response.data),$scope.loading=!1},function(error){$scope.loading=!1})},$scope.ok=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},window.onpopstate=function(event){$uibModalInstance.close()},$scope.$on("$locationChangeStart",function(event){event.preventDefault(),$uibModalInstance.dismiss("cancel")})}angular.module("exams").controller("AddExamController",AddExamController),AddExamController.$inject=["$scope","$rootScope","$state","$stateParams","ExamsService","Authentication","$uibModalInstance","old_exam"]}(),function(){function AddQuestionController($window,$timeout,$scope,$rootScope,$state,$stateParams,ExamsService,Authentication,$uibModalInstance,$document,selected_exam,old_question,standards,FileUploader){function onAfterAddingFile(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result,$scope.image_upload_success=""},0)}}}function onSuccessItem(fileItem,response,status,headers){$scope.image_upload_success="image uploaded successfully",$scope.question.imageURL=response.profileImageURL,cancelUpload()}function onErrorItem(fileItem,response,status,headers){$scope.image_upload_success="error uploading image",cancelUpload()}function cancelUpload(){$scope.imageURL=null,$scope.uploader.clearQueue()}$scope.standards=standards.data,$scope.selected_exam=selected_exam,$scope.selected_type=null,$scope.old_question=null,$scope.alert={},$scope.loading=!1,$scope.multiple_choice="multiple choice",$scope.multiple_select="multiple select",$scope.fill_in_the_blank="fill in the blank",$scope.mc_question={},$scope.mc_question.standards=[],$scope.mc_question.answers=[],$scope.mc_question.exam=selected_exam._id,$scope.mc_question.type=$scope.multiple_choice,$scope.ms_question={},$scope.ms_question.standards=[],$scope.ms_question.answers=[],$scope.ms_question.exam=selected_exam._id,$scope.ms_question.type=$scope.multiple_select,$scope.fitb_question={},$scope.fitb_question.standards=[],$scope.fitb_question.answers=[],$scope.fitb_question.exam=selected_exam._id,$scope.fitb_question.type=$scope.fill_in_the_blank,old_question&&($scope.selected_type=old_question.type,$scope.old_question=old_question,$scope.question=JSON.parse(JSON.stringify(old_question))),$scope.set_type=function(_type){$scope.selected_type=_type,_type===$scope.multiple_choice?$scope.question=$scope.mc_question:_type===$scope.multiple_select?$scope.question=$scope.ms_question:_type===$scope.fill_in_the_blank&&($scope.question=$scope.fitb_question),$scope.init=!0},$scope.add_new_answer=function(_question){var answer={content:"",correct:!1,is_numeric:!1,tolerance:0,value:0};null!=_question.answers&&_question.answers.push(answer)},$scope.add_new_standard=function(_question){var standard="";null!=_question.standards&&_question.standards.push(standard)},$scope.select_mc_answer=function(index){if($scope.question.type===$scope.multiple_choice&&$scope.question&&$scope.question.answers)for(var i=0;i<$scope.question.answers.length;++i)$scope.question.answers[i].correct=i==index},$scope.remove_answer=function(_question,_index){_question.answers&&_question.answers.splice(_index,1)},$scope.remove_standard=function(_question,_index){_question.standards&&_question.standards.splice(_index,1)},$scope.submit=function(){return $scope.loading=!0,console.log($scope.question.standards),old_question?void ExamsService.update_question($scope.question).then(function(response){$scope.loading=!1,old_question.content=response.data.content,old_question.points=response.data.points,old_question.standards=response.data.standards,old_question.answers=response.data.answers,old_question.imageURL=response.data.imageURL,selected_exam.version++,$scope.ok()},function(error){$scope.loading=!1,error.data&&error.data.message&&$scope.set_alert(error.data.message),console.log(error)}):void ExamsService.create_question($scope.question).then(function(response){selected_exam.questions.push(response.data),selected_exam.version++,$scope.ok()},function(error){$scope.loading=!1,error.data&&error.data.message&&$scope.set_alert(error.data.message)})},$scope.set_alert=function(msg){$scope.alert.message=msg,$scope.alert.show=!0},$scope.clear_alert=function(){$scope.alert.show=!1},$scope.ok=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.$on("$locationChangeStart",function(event){event.preventDefault(),$uibModalInstance.dismiss("cancel")}),$scope.imageURL=null,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture",onAfterAddingFile:onAfterAddingFile,onSuccessItem:onSuccessItem,onErrorItem:onErrorItem}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploadProfilePicture=function(){$scope.uploader.uploadAll()},$scope.cancelUpload=cancelUpload,$scope.delete_image=function(){$scope.question.imageURL=null}}angular.module("exams").controller("AddQuestionController",AddQuestionController),AddQuestionController.$inject=["$window","$timeout","$scope","$rootScope","$state","$stateParams","ExamsService","Authentication","$uibModalInstance","$document","selected_exam","old_question","standards","FileUploader"]}(),function(){function EditExamsController($scope,$rootScope,$state,$stateParams,ExamsService,Authentication,$uibModal,$templateCache,exams){$scope.load=!1,$state.go("edit-exams.single"),$scope.exams=exams.data;for(var i=0;i<$scope.exams.length;++i)$scope.exams[i].active=!1;$scope.class_types=[],$scope.selected_class_type=null;for(var i=0;i<$scope.exams.length;++i)-1==$scope.class_types.indexOf($scope.exams[i]["class"])&&$scope.class_types.push($scope.exams[i]["class"]);$scope.add_exam=function(){var modalInstance=$uibModal.open({animation:!0,templateUrl:"/modules/exams-crud/client/views/add-exam.client.view.html",controller:"AddExamController",windowClass:"add-question-modal",size:"lg",resolve:{old_exam:function(){return null}}});modalInstance.result.then(function(_exam){_exam&&$scope.exams.unshift(_exam)})},$scope.class_types&&($scope.selected_class_type=$scope.class_types[0]),$scope.set_tab=function(exam_id){for(var i=0;i<$scope.exams.length;++i)$scope.exams[i].active=exam_id===$scope.exams[i]._id},$scope.activate_tab=function(_exam){for(var i=0;i<$scope.exams.length;++i)$scope.exams[i].active=!1;_exam&&($scope.load=!0,_exam.active=!0,$state.go("edit-exams.single",{exam_id:_exam._id}).then(function(){$scope.load=!1}))}}angular.module("exams").controller("EditExamsController",EditExamsController),EditExamsController.$inject=["$scope","$rootScope","$state","$stateParams","ExamsService","Authentication","$uibModal","$templateCache","exams"]}(),function(){function EditSingleExamController($scope,$rootScope,$state,$stateParams,ExamsService,Authentication,$uibModal,exam){$scope.exam=null,$scope.load=!1,$scope.loading=!1,$scope.loading_question=!1,$scope.calculate_points=function(_exam){_exam.point_total=0;for(var i=0;i<_exam.questions.length;++i){if(null==_exam.questions[i].points){_exam.point_total="One or more questions with undefined point value.";break}_exam.point_total+=Number(_exam.questions[i].points)}},exam&&($scope.exam=exam.data,$scope.set_tab($scope.exam._id),$scope.calculate_points($scope.exam)),$scope.delete_exam=function(_exam){var modalInstance=$uibModal.open({animation:!0,templateUrl:"/modules/exams-crud/client/views/prompt-yes-no.client.view.html",controller:"PromptController",windowClass:"prompt-modal",size:"lg",resolve:{question:function(){return null},string_header:function(){return"Are you sure you want to premanantly delete "+_exam.title+"?"},old_exam:function(){return _exam}}});modalInstance.result.then(function(yes){yes&&($scope.loading=!0,ExamsService.delete_exam(_exam._id).then(function(response){$state.go("edit-exams",{},{reload:!0})},function(error){$scope.loading=!1}))})},$scope.delete_question=function(_exam,_question){var modalInstance=$uibModal.open({animation:!0,templateUrl:"/modules/exams-crud/client/views/prompt-yes-no.client.view.html",controller:"PromptController",windowClass:"prompt-modal",size:"lg",resolve:{question:function(){return _question},string_header:function(){return"Are you sure you want to premanantly delete this question?"},old_exam:function(){return null}}});modalInstance.result.then(function(yes){yes&&(_question.loading=!0,ExamsService.remove_question(_exam,_question._id).then(function(response){_exam.version++,_exam.questions.splice(_exam.questions.indexOf(_question),1),$scope.calculate_points(_exam)},function(error){_question.loading=!1}))})},$scope.edit_exam=function(_exam){var modalInstance=$uibModal.open({animation:!0,templateUrl:"/modules/exams-crud/client/views/add-exam.client.view.html",controller:"AddExamController",windowClass:"add-question-modal",size:"lg",resolve:{old_exam:function(){return _exam}}});modalInstance.result.then(function(edited_exam){if(edited_exam)for(var i=0;i<$scope.exams.length;++i)if($scope.exams[i]._id===edited_exam._id){$scope.exams[i]=edited_exam,$scope.activate_tab($scope.exams[i]);break}})},$scope.add_question_to_exam=function(_exam){var modalInstance=$uibModal.open({animation:!0,templateUrl:"/modules/exams-crud/client/views/add-question.client.view.html",controller:"AddQuestionController",windowClass:"add-question-modal",size:"lg",resolve:{selected_exam:function(){return _exam},old_question:function(){return null},standards:["ExamsService",function(ExamsService){return ExamsService.get_standards()}]}});modalInstance.result.then(function(){$scope.calculate_points(_exam)})},$scope.edit_question=function(_exam,_question){var modalInstance=$uibModal.open({animation:!0,templateUrl:"/modules/exams-crud/client/views/add-question.client.view.html",controller:"AddQuestionController",windowClass:"add-question-modal",size:"lg",resolve:{selected_exam:function(){return _exam},old_question:function(){return _question},standards:["ExamsService",function(ExamsService){return ExamsService.get_standards()}]}});modalInstance.result.then(function(){$scope.calculate_points(_exam)})}}angular.module("exams").controller("EditSingleExamController",EditSingleExamController),EditSingleExamController.$inject=["$scope","$rootScope","$state","$stateParams","ExamsService","Authentication","$uibModal","exam"]}(),function(){function PromptController($scope,$rootScope,$state,$stateParams,ExamsService,Authentication,$uibModalInstance,string_header){$scope.string_header=string_header,$scope.yes=function(){$uibModalInstance.close(!0)},$scope.no=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.$on("$locationChangeStart",function(event){event.preventDefault(),$uibModalInstance.dismiss("cancel")})}angular.module("exams").controller("PromptController",PromptController),PromptController.$inject=["$scope","$rootScope","$state","$stateParams","ExamsService","Authentication","$uibModalInstance","string_header"]}(),MathJax.Hub.Config({skipStartupTypeset:!0,text2jax:{preview:"none"},messageStyle:"none","HTML-CSS":{showMathMenu:!1}}),MathJax.Hub.Configured(),angular.module("exams").directive("mathjaxBind",function(){return{restrict:"A",scope:{text:"@mathjaxBind"},controller:["$scope","$element","$attrs",function($scope,$element,$attrs){$scope.$watch("text",function(value){var $script=angular.element("<script type='math/tex'>").html(void 0==value?"":value);$element.html(""),$element.append($script),MathJax.Hub.Queue(["Reprocess",MathJax.Hub,$element[0]],function(){})})}]}}),angular.module("exams").directive("mathjax",["$compile",function($compile){return{restrict:"A",replace:!0,link:function(scope,ele,attrs){scope.$watch(attrs.mathjax,function(html){html&&(html=html.replace(/\$([^$]+)\$/g,'<span mathjax-bind="$1"></span>'),ele.html(html),$compile(ele.contents())(scope))})}}}]),function(){angular.module("exams.services").factory("ExamsService",["$http",function($http){var exam_url_base="/api/exams",question_url_base="/api/questions",standard_url_base="/api/standards";return{get_exams:function(questions,answers){return $http.get(exam_url_base)},get_exam:function(id){return $http.get(exam_url_base+"/"+id)},update_exam:function(exam){return $http.put(exam_url_base+"/"+exam._id,exam)},create_exam:function(exam){return $http.post(exam_url_base,exam)},delete_exam:function(id){return $http["delete"](exam_url_base+"/"+id)},remove_question:function(exam,question_id){return $http["delete"](exam_url_base+"/"+exam._id+"/questions/"+question_id)},get_questions:function(){return $http.get(question_url_base)},get_question:function(id){return $http.get(question_url_base+"/"+id)},update_question:function(question){return $http.put(question_url_base+"/"+question._id,question)},create_question:function(question){return $http.post(question_url_base,question)},delete_question:function(id){return $http["delete"](question_url_base+"/"+id)},get_standards:function(){return $http.get(standard_url_base)},get_standard:function(id){return $http.get(standard_url_base+"/"+id)},update_standard:function(standard){return $http.put(standard_url_base+"/"+standard._id,standard)},create_standard:function(standard){return $http.post(standard_url_base,standard)},delete_standard:function(id){return $http["delete"](standard_url_base+"/"+id)}}}])}(),function(){function menuConfig(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Edit Standards",state:"edit-standards",roles:["admin"]})}angular.module("standards").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("edit-standards",{parent:"admin",url:"/standards/edit",templateUrl:"modules/exams-standards/client/views/edit-standards.client.view.html",controller:"EditStandardsController",resolve:{standards:["ExamsService",function(ExamsService){return ExamsService.get_standards()}]}}).state("view-standards",{parent:"info",url:"/standards/view",templateUrl:"modules/exams-standards/client/views/view-standards.client.view.html",controller:"ViewStandardsController",resolve:{standards:["ExamsService",function(ExamsService){return ExamsService.get_standards()}]}})}angular.module("standards.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){function AddStandardController($timeout,$scope,$rootScope,$state,$stateParams,ExamsService,Authentication,$uibModalInstance,$document,old_standard,view){$scope.standard={},$scope.alert={},$scope.view=view,old_standard&&($scope.old_standard=old_standard,
$scope.standard=JSON.parse(JSON.stringify(old_standard))),$scope.submit=function(){return $scope.loading=!0,old_standard?void ExamsService.update_standard($scope.standard).then(function(response){$scope.loading=!1,old_standard.content=response.data.content,old_standard.code=response.data.code,old_standard.notes=response.data.notes,$scope.ok(old_standard)},function(error){$scope.loading=!1,error.data&&error.data.message&&$scope.set_alert(error.data.message),console.log(error)}):void ExamsService.create_standard($scope.standard).then(function(response){$scope.ok(response.data)},function(error){$scope.loading=!1,error.data&&error.data.message&&$scope.set_alert(error.data.message)})},$scope.set_alert=function(msg){$scope.alert.message=msg,$scope.alert.show=!0},$scope.clear_alert=function(){$scope.alert.show=!1},$scope.ok=function(data){$uibModalInstance.close(data)},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.$on("$locationChangeStart",function(event){event.preventDefault(),$uibModalInstance.dismiss("cancel")})}angular.module("standards").controller("AddStandardController",AddStandardController),AddStandardController.$inject=["$timeout","$scope","$rootScope","$state","$stateParams","ExamsService","Authentication","$uibModalInstance","$document","old_standard","view"]}(),function(){function EditStandardsController($scope,$rootScope,$state,$stateParams,ExamsService,Authentication,$uibModal,standards){$scope.standards=standards.data,$scope.loading=!1,$scope.edit_standard=function(_standard){var modalInstance=$uibModal.open({animation:!0,templateUrl:"/modules/exams-standards/client/views/add-standard.client.view.html",controller:"AddStandardController",windowClass:"add-question-modal",size:"lg",resolve:{old_standard:function(){return _standard},view:!1}});modalInstance.result.then(function(edited_standard){if(edited_standard){for(var i=0;i<$scope.standards.length;++i)if($scope.standards[i]._id===edited_standard._id)return void($scope.standards[i]=edited_standard);$scope.standards.push(edited_standard)}})},$scope.delete_standard=function(_standard){var modalInstance=$uibModal.open({animation:!0,templateUrl:"/modules/exams-crud/client/views/prompt-yes-no.client.view.html",controller:"PromptController",windowClass:"prompt-modal",size:"lg",resolve:{string_header:function(){return"Are you sure you want to permanantely delete this standard?"}}});modalInstance.result.then(function(yes){yes&&($scope.loading=!0,ExamsService.delete_standard(_standard._id).then(function(response){$scope.loading=!1,$scope.standards.splice($scope.standards.indexOf(_standard),1)},function(error){$scope.loading=!1}))})}}angular.module("standards").controller("EditStandardsController",EditStandardsController),EditStandardsController.$inject=["$scope","$rootScope","$state","$stateParams","ExamsService","Authentication","$uibModal","standards"]}(),function(){function ViewStandardsController($scope,$rootScope,$state,$stateParams,ExamsService,Authentication,$uibModal,standards){$scope.standards=standards.data,$scope.loading=!1,$scope.view_standard=function(_standard){$uibModal.open({animation:!0,templateUrl:"/modules/exams-standards/client/views/add-standard.client.view.html",controller:"AddStandardController",windowClass:"add-question-modal",size:"lg",resolve:{old_standard:function(){return _standard},view:!0}})}}angular.module("standards").controller("ViewStandardsController",ViewStandardsController),ViewStandardsController.$inject=["$scope","$rootScope","$state","$stateParams","ExamsService","Authentication","$uibModal","standards"]}(),function(){function menuConfig(Menus){}angular.module("exams-take").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("exams-take",{url:"/exams","abstract":!0,template:"<ui-view></ui-view>"}).state("exams-take.select",{parent:"exams-take",url:"/select",templateUrl:"modules/exams-take/client/views/select-exam.client.view.html",controller:"SelectExamController",resolve:{exams:["ExamsService",function(ExamsService){return ExamsService.get_exams()}]}}).state("exams-take.take",{parent:"exams-take",url:"/:eID",templateUrl:"modules/exams-take/client/views/take-exam.client.view.html",controller:"TakeExamController"})}angular.module("exams-take.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){function calculatorModal($scope,$rootScope,$window,$state,$stateParams,ExamsService,ExamsAnalysisService,Authentication,$uibModal,$uibModalInstance){$scope.exitCalc=function(){$uibModalInstance.dismiss("exitCalc")},$scope.$on("$locationChangeStart",function(event){event.preventDefault(),$uibModalInstance.dismiss("cancel")})}angular.module("exams-take").controller("calculatorModal",calculatorModal),calculatorModal.$inject=["$scope","$rootScope","$window","$state","$stateParams","ExamsService","ExamsAnalysisService","Authentication","$uibModal","$uibModalInstance"]}(),function(){function formulaModal($scope,$rootScope,$window,$state,$stateParams,ExamsService,ExamsAnalysisService,Authentication,$uibModal,$uibModalInstance){$scope.exitFormula=function(){$uibModalInstance.dismiss("exitFormula")},$scope.$on("$locationChangeStart",function(event){event.preventDefault(),$uibModalInstance.dismiss("cancel")})}angular.module("exams-take").controller("formulaModal",formulaModal),formulaModal.$inject=["$scope","$rootScope","$window","$state","$stateParams","ExamsService","ExamsAnalysisService","Authentication","$uibModal","$uibModalInstance"]}(),function(){function notepadModal($scope,$rootScope,$window,$state,$stateParams,ExamsService,ExamsAnalysisService,Authentication,$uibModal,$uibModalInstance,attempt){$scope.attempt=attempt,$scope.exitCalc=function(){$uibModalInstance.dismiss("exitCalc")},$scope.$on("$locationChangeStart",function(event){event.preventDefault(),$uibModalInstance.dismiss("cancel")})}angular.module("exams-take").controller("notepadModal",notepadModal),notepadModal.$inject=["$scope","$rootScope","$window","$state","$stateParams","ExamsService","ExamsAnalysisService","Authentication","$uibModal","$uibModalInstance","attempt"]}(),function(){function SelectExamController($scope,$rootScope,$state,$stateParams,ExamsService,ExamsAnalysisService,Authentication,$uibModal,exams){$scope.exams=exams.data,$scope.attempts=[],$scope.error=null,$scope.selected_mode="take",$scope.calculate_points=function(_exam){_exam.point_total=0;for(var i=0;i<_exam.questions.length;++i){if(null==_exam.questions[i].points){_exam.point_total="One or more questions with undefined point value.";break}_exam.point_total+=Number(_exam.questions[i].points)}};for(var i=0;i<$scope.exams.length;++i)$scope.calculate_points($scope.exams[i]);$scope.calculate_remaining_attempts=function(_attempts,_exams){for(var i=0;i<_exams.length;++i){_exams[i].remaining_attempts=_exams[i].allowed_attempts;for(var j=0;j<_attempts.length;++j)_exams[i]._id===_attempts[j].exam._id&&_attempts[j].submitted&&_exams[i].remaining_attempts--}},ExamsAnalysisService.get_attempts().then(function(response){$scope.attempts=response.data,$scope.calculate_remaining_attempts($scope.attempts,$scope.exams)},function(error){$scope.error=error}),$scope.start_exam=function(_exam){$state.go("exams-take.take",{eID:_exam._id})},$scope.review_attempt=function(_attempt){$state.go("exams-analysis.single",{aID:_attempt._id})},$scope.delete_attempt=function(_attempt){ExamsAnalysisService.delete_attempt(_attempt._id).then(function(response){$scope.attempts.splice($scope.attempts.indexOf(_attempt),1)},function(error){$scope.error=error,console.log(error)})}}angular.module("exams-take").controller("SelectExamController",SelectExamController),SelectExamController.$inject=["$scope","$rootScope","$state","$stateParams","ExamsService","ExamsAnalysisService","Authentication","$uibModal","exams"]}(),function(){function TakeExamController($scope,$rootScope,$window,$state,$stateParams,ExamsService,ExamsAnalysisService,Authentication,$uibModal){$scope.attempt={},$scope.multiple_choice="multiple choice",$scope.multiple_select="multiple select",$scope.fill_in_the_blank="fill in the blank",$scope.loading=!1,$scope.init_loading=!0,$scope.error=null,$scope.calc_opened=!1,$scope.notepad_opened=!1,$scope.formula_opened=!1,$scope.indx=0,$scope.percent_remaining=0,$scope.time_remaining=$scope.attempt.exam_allotted_time;var timer=setInterval(function(){var currentDate=(new Date).getTime(),startTime=Date.parse($scope.attempt.start_time),endTime=$scope.attempt.exam_allotted_time,timeElasped=Math.abs(currentDate-startTime)/6e4;$scope.$apply(function(){$scope.time_remaining=endTime-Math.floor(timeElasped),$scope.percent_remaining=Math.abs($scope.time_remaining)/endTime*100,($scope.percent_remaining>100||$scope.time_remaining<0)&&($scope.percent_remaining=100,$scope.time_remaining=0,clearInterval(timer),$scope.time_out())})},1e3);$scope.random=function(){return.5-Math.random()},$scope.numberOfPages=function(){return $scope.attempt.questions.length},ExamsAnalysisService.create_attempt($stateParams.eID).then(function(response){$scope.init_loading=!1,$scope.attempt=response.data,$scope.set_answers($scope.attempt)},function(error){$scope.init_loading=!1,$scope.error=error}),$scope.save_attempt=function(){$scope.loading=!0,ExamsAnalysisService.save_answers($scope.attempt).then(function(response){$scope.loading=!1},function(error){$scope.loading=!1,$scope.error=error})},$scope.time_out=function(){confirm("Time is up! On the actual test you would have to stop now.")},$scope.save_answer=function(_question,_answer){$scope.attempt.student_answers=$scope.attempt.student_answers.filter(function(sa){return sa.answer_id!==_answer._id&&(_question.type!==$scope.multiple_choice||sa.question_id!==_question._id)}),$scope.attempt.student_answers.push({question_id:_question._id,answer_id:_answer._id,is_numeric:_answer.is_numeric||!1,value:_answer.value,content:_answer.content,correct:_answer.correct}),$scope.save_attempt()},$scope.set_answers=function(_attempt){for(var i=0;i<_attempt.questions.length;++i)for(var j=0;j<_attempt.student_answers.length;++j)if(_attempt.student_answers[j].question_id===_attempt.questions[i].data._id)for(var k=0;k<_attempt.questions[i].data.answers.length;++k)_attempt.questions[i].data.answers[k]._id===_attempt.student_answers[j].answer_id&&(_attempt.questions[i].data.type===$scope.multiple_choice?(_attempt.questions[i].selected_answer=_attempt.questions[i].data.answers[k]._id,_attempt.questions[i].data.answers[k].correct=_attempt.student_answers[j].correct):_attempt.questions[i].data.type===$scope.multiple_select?_attempt.questions[i].data.answers[k].correct=_attempt.student_answers[j].correct:_attempt.questions[i].data.type===$scope.fill_in_the_blank&&(_attempt.questions[i].data.answers[k].value=_attempt.student_answers[j].value,_attempt.questions[i].data.answers[k].content=_attempt.student_answers[j].content))},$scope.submit_attempt=function(){clearInterval(timer),$scope.loading=!0,ExamsAnalysisService.submit_attempt($scope.attempt).then(function(response){$state.go("exams-take.select")},function(error){$scope.loading=!1,$scope.error=error})},$scope.previousQuestion=function(){$scope.indx<=0||($scope.indx-=1)},$scope.nextQuestion=function(){$scope.indx>=$scope.attempt.questions.length-1||($scope.indx+=1)},$scope.checkNextQuestion=function(){return $scope.indx>=$scope.attempt.questions.length-1?!0:!1},$scope.checkPrevQuestion=function(){return $scope.indx<=0?!0:!1},$scope.change_question=function(newIndex){$scope.indx=newIndex},$scope.open_calculator=function(){$scope.calc_opened=!0;var modalInstance=$uibModal.open({windowClass:"calc-modal",animation:!1,templateUrl:"/modules/exams-take/client/views/calc-modal.client.view.html",backdrop:"static",keyboard:!1,controller:"calculatorModal",backdropClass:"calc-modal",openedClass:"calc-open"});modalInstance.result.then(null,function(){$scope.calc_opened=!1})},$scope.open_notepad=function(){$scope.notepad_opened=!0;var modalInstance=$uibModal.open({windowClass:"notepad-modal",animation:!1,templateUrl:"/modules/exams-take/client/views/notes-modal.client.view.html",backdrop:"static",keyboard:!1,controller:"notepadModal",backdropClass:"calc-modal",resolve:{attempt:function(){return $scope.attempt}}});modalInstance.result.then(null,function(){$scope.notepad_opened=!1})},$scope.open_formula_sheet=function(){$scope.formula_opened=!0;var modalInstance=$uibModal.open({windowClass:"formula-modal",animation:!1,size:"lg",templateUrl:"/modules/exams-take/client/views/formula-modal.client.view.html",backdrop:"static",keyboard:!1,controller:"formulaModal",backdropClass:"calc-modal"});modalInstance.result.then(null,function(){$scope.formula_opened=!1})}}angular.module("exams-take").controller("TakeExamController",TakeExamController),TakeExamController.$inject=["$scope","$rootScope","$window","$state","$stateParams","ExamsService","ExamsAnalysisService","Authentication","$uibModal"]}(),function(){function modaldraggable($document,$timeout){return function(scope,element,attr){$timeout(function(){function mousemove(event){y=event.screenY-startY,x=event.screenX-startX,dialog.css({top:y+"px",left:x+"px"})}function mouseleave(){$document.unbind("mousemove",mousemove),$document.unbind("mouseup",mouseleave)}var startX=0,startY=0,x=0,y=0,dialog=angular.element(document.querySelector("."+attr.modaldraggable+" .modal-dialog")),header=angular.element(document.querySelector("."+attr.modaldraggable+" .modal-header"));dialog.css({position:"fixed",cursor:"move"}),header.on("mousedown",function(event){event.preventDefault(),startX=event.screenX-x,startY=event.screenY-y,$document.on("mousemove",mousemove),$document.on("mouseup",mouseleave)})},0)}}angular.module("exams-take").directive("modaldraggable",modaldraggable),modaldraggable.$inject=["$document","$timeout"]}(),angular.module("exams-take").filter("startFrom",function(){return function(input,start){return input&&input.length?(start=+start,input.slice(start)):void 0}}),function(){function menuConfig(Menus){Menus.addMenuItem("topbar",{title:"Information",state:"info",type:"dropdown",roles:["admin","user"]}),Menus.addSubMenuItem("topbar","info",{title:"Instructions",state:"info.1"}),Menus.addSubMenuItem("topbar","info",{title:"Accessing the Test",state:"info.2"}),Menus.addSubMenuItem("topbar","info",{title:"Signing In",state:"info.3"}),Menus.addSubMenuItem("topbar","info",{title:"Test Features",state:"info.4"}),Menus.addSubMenuItem("topbar","info",{title:"Question Types",state:"info.5"}),Menus.addSubMenuItem("topbar","info",{title:"EOC standards",state:"view-standards"})}angular.module("info").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("info",{url:"/information",template:"<ui-view></ui-view>","abstract":!0}).state("info.1",{url:"/1",parent:"info",templateUrl:"modules/info/client/views/info1.client.view.html"}).state("info.2",{url:"/1",parent:"info",templateUrl:"modules/info/client/views/info2.client.view.html"}).state("info.3",{url:"/1",parent:"info",templateUrl:"modules/info/client/views/info3.client.view.html"}).state("info.4",{url:"/1",parent:"info",templateUrl:"modules/info/client/views/info4.client.view.html"}).state("info.5",{url:"/1",parent:"info",templateUrl:"modules/info/client/views/info5.client.view.html"})}angular.module("info.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin!==password?!1:!0})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);